#ifndef MT4G_PARSER
#define MT4G_PARSER

#include "Component.hpp"
#include "DataPath.hpp"

/*! \file */


namespace sys_sage {
    /**
     * Parse GPU topology file generated by mt4g.
     * @param parent - parent Node, where the new GPU representation will be created (the GPU will be represented as a child (newly created Chip component) of the parent).
     * @param dataSourcePath - path to mt4g-generated result file. (.csv)
     * @param gpuId - ID of the new GPU Component.
     * @param delim (default ";") - delimiter in the CSV
    */
    int parseMt4gTopo(Node* parent, string dataSourcePath, int gpuId, string delim = ";");
    /**
     * Parse GPU topology file generated by mt4g.
     * @param parent - parent Component, where the new GPU representation will be created (the GPU will be represented as a child (newly created Chip component) of the parent).
     * @param dataSourcePath - path to mt4g-generated result file. (.csv)
     * @param gpuId - ID of the new GPU Component.
     * @param delim (default ";") - delimiter in the CSV
    */
    int parseMt4gTopo(Component* parent, string dataSourcePath, int gpuId, string delim = ";");
    /**
     * Parse GPU topology file generated by mt4g.
     * @param gpu - the (already existing) Chip* gpu Component, where the topology and other information from mt4g will be inserted.
     * @param dataSourcePath - path to mt4g-generated result file. (.csv)
     * @param delim (default ";") - delimiter in the CSV
    */
    int parseMt4gTopo(Chip* gpu, string dataSourcePath, string delim = ";");

    /// @private
    class Mt4gParser
    {
    public:
        Mt4gParser(Chip* gpu, string dataSourcePath, string delim = ";");

        int ParseBenchmarkData();
    private:
        int ReadBenchmarkFile();
        map<string,vector<string> > benchmarkData;
        string dataSourcePath;
        string delim;
        Chip* root;
        const bool latency_in_cycles;
        bool L2_shared_on_gpu;
        double Memory_Clock_Frequency;
        int Memory_Bus_Width;

        int parseGPU_INFORMATION();
        int parseCOMPUTE_RESOURCE_INFORMATION();
        int parseREGISTER_INFORMATION();
        int parseADDITIONAL_INFORMATION();
        int parseMemory(string header_name, string memory_name);
        int parseCaches(string header_name, string cache_type);
    };

    /// @private
    const std::string whiteSpaces( " \f\n\r\t\v" );
    /// @private
    void trimRight( std::string& str,const std::string& trimChars = whiteSpaces );
    /// @private
    void trimLeft( std::string& str,const std::string& trimChars = whiteSpaces );
    /// @private
    void trim( std::string& str, const std::string& trimChars = whiteSpaces );

} //namespace sys_sage

#endif //MT4G_PARSER
